-- stree stands for CHOOSE_ONE(stupid/simple/strange/string) tree.
-- it is used for autocompletation of commands
-- good enough for now

--[[
Author: SleepGamer
Licence: As long as you retain this notice you can do whatever you want with this stuff.
		If we meet some day, and you think this stuff is worth it, you can drop some items for me.
]]--

function Node(value, parent, count)
	count = count or 0
	return {parent=parent, childs={}, value=value, count=count}
end

function addChild(parent, value, node)
	if not parent.childs[value] then
		parent.childs[value] = node
		node.parent = parent
	end
	parent.count = parent.count + 1
	return parent.childs[value]
end


function addText(root, text)
	local curNode = root
	for char in string.gmatch(text, ".") do
		curNode = addChild(curNode, char, Node(nil))
	end
	curNode.value = text
	--print("root now has #nodes: "..root.count)
end

function removeText(root, text, removeSubTree)
	removeSubTree = removeSubTree or false
	local curNode = findNode(root, text)
	if not curNode then return false end
	local removed = 0
	curNode.value = nil
	if curNode.parent and curNode.count < 1 or removeSubTree then
		removed = curNode.count + 1
		curNode.parent.childs[text:sub(#text, #text)] = nil	
	else
		removed = 1
	end
	curNode = curNode.parent
	local i = #text -1
	while curNode do
		curNode.count = curNode.count - removed
		if curNode.count < 0 and curNode.parent then
			curNode.parent.childs[text:sub(i, i)] = nil
		end
		curNode = curNode.parent
		i = i -1
	end
	return true
end

function findNode(root, text)
	local curNode = root
	for char in string.gmatch(text, ".") do
		if not curNode.childs[char] then
			return false
		end
		curNode = curNode.childs[char]
	end
	return curNode
end

function collectValues(node)
	local ret = {}
	local tmp
	if node.value then table.insert(ret, node.value) end
	for k, v in pairs(node.childs) do
		tmp = collectValues(v)
		for i=1,#tmp do table.insert(ret, tmp[i]) end
	end
	return ret
end

function autocomplete(root, text)
	local node = findNode(root, text)
	if not node then return false end
	return collectValues( node )
end


-- Some utils stuff
function addLines(root, text)
	for i=1,#text do
		addText(root, text[i])
	end
end
function Stree(arr)
	local root = Node()
	for i=1,#arr do addText(root, arr[i]) end
	return root
end


--[[
local root = Node(nil, nil, 0)
addText(root, "abc")
addText(root, "test this shit")
addText(root, "test")
addText(root, "tes")
addText(root, "test some other stuff")


print("root has #words: "..root.count)
--print("words starting with test: "..findNode(root, "test").count)
print("words starting with t: "..findNode(root, "t").count)
removeText(root, "test", true)
print("words starting with t: "..findNode(root, "t").count)
local tmp = collectValues(root)
for i=1,#tmp do
	print(tmp[i])
end
]]--
